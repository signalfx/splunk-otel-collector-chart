{{- $svc := (include "splunk-otel-collector.getServiceConfig" (dict "context" . "svc" .Values.agent.service) | fromYaml) }}
{{- if .Values.agent.service.enabled }}
{{/*
Fargate doesn't support daemonsets so never use for that platform
*/}}
{{- if and .Values.agent.enabled (ne .Values.distribution "eks/fargate") }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "splunk-otel-collector.fullname" . }}-agent
  namespace: {{ template "splunk-otel-collector.namespace" . }}
  labels:
    {{- include "splunk-otel-collector.commonLabels" . | nindent 4 }}
    app: {{ template "splunk-otel-collector.name" . }}
    component: otel-collector-agent
    chart: {{ template "splunk-otel-collector.chart" . }}
    release: {{ .Release.Name }}
    app.kubernetes.io/component: otel-collector-agent
{{- with  $svc.annotations }}
  annotations:
{{ toYaml . | trim | indent 4 }}
{{- end }}
spec:
  type: {{ $svc.type }}
  ports:
  {{- range $key, $port := .Values.agent.ports }}
  {{- $metricsEnabled   := and (eq (include "splunk-otel-collector.metricsEnabled"   $) "true") (has "metrics"   $port.enabled_for) }}
  {{- $tracesEnabled    := and (eq (include "splunk-otel-collector.tracesEnabled"    $) "true") (has "traces"    $port.enabled_for) }}
  {{- $logsEnabled      := and (eq (include "splunk-otel-collector.logsEnabled"      $) "true") (has "logs"      $port.enabled_for) }}
  {{- $profilingEnabled := and (eq (include "splunk-otel-collector.profilingEnabled" $) "true") (has "profiling" $port.enabled_for) }}
  {{- if or $metricsEnabled $tracesEnabled $logsEnabled $profilingEnabled }}
  - name: {{ $key }}
    port: {{ $port.containerPort }}
    targetPort: {{ $key }}
    protocol: {{ $port.protocol }}
  {{- end }}
  {{- end }}
  selector:
    app: {{ template "splunk-otel-collector.name" . }}
    component: otel-collector-agent
    release: {{ .Release.Name }}
  internalTrafficPolicy: Local
{{- end }}
{{- end }}
